<?php

/**
 * Initialize the module
*/
function ma_gcs_init() {
	drupal_add_js('https://www.google.com/jsapi', 'external');
	drupal_add_css(drupal_get_path('module', 'ma_gcs') .'/css/ma_gcs.css');
	drupal_add_js(drupal_get_path('module', 'ma_gcs') . '/js/ma_gcs.js');
}

/**
 * Define our shortcodes and their titles, descriptions, and callback functions
*/
function ma_gcs_menu() {
  $items = array();
  $items['admin/config/services/ma_gcs'] = array(
    'title' => 'Google Charts Shortcodes',
    'description' => 'Configuration for Google Charts Shortcodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ma_gcs_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ma_gcs.admin.inc',
  );
  return $items;
}

function _ma_gcs_chart_types() {
	return array(
		'Pie' => 'piechart',
		'Bar' => 'barchart',
		'Column' => 'columnchart',
		'Table' => 'tablechart'			
	);
}

function ma_gcs_shortcode_info() {
	$chartarray=_ma_gcs_chart_types();
	foreach ($chartarray as $key => $value) {
		$shortcodes["$value"] = array(
			'title' => ("Google $key Chart"),
			'description' => ("Embed a Google $key Chart."),
			'attributes callback' => 'ma_gcs_shortcode_' . $value . '_attributes',
			'process callback' => 'ma_gcs_shortcode_' . $value . '',
			'tips callback' => 'ma_gcs_shortcode_' . $value . '_tip'
		);
	}
	return $shortcodes;
}
/**
 * Attributes form element for random Shortcode.
 *
 * Used by shortcode_wysiwyg module to add form elements for attributes.
 */
function _ma_gcs_formbuild($type) {
	$key = $type;
	$value = $key.'chart';
	$value = strtolower($value);

	$form['' . $value . '-link'] = array(
		'#name' => t('link'),
		'#title' => t("Enter $key Sheets URL"),
		'#type' => 'textfield',
		'#states' => array(
			'visible' => array(
				':input[name="shortcode"]' => array("value" => "$value"),
			),
		),
	);

	$form['' . $value . '-title'] = array(
		'#name' => t('title'),
		'#title' => t("Enter A $key Chart Title"),
		'#type' => 'textfield',
		'#size' => 40,
		'#states' => array(
			'visible' => array(
				':input[name="shortcode"]' => array('value' => "$value"),
			),
		),
	);

	$form['' . $value . '-subtitle'] = array(
		'#name' => t('subtitle'),
		'#title' => t('Enter a Sub-Title'),
		'#type' => 'textfield',
		'#size' => 40,
		'#states' => array(
			'visible' => array(
				':input[name="shortcode"]' => array('value' => "$value"),
			),
		),
	);

	// To make the fieldset collapsible
	$form['' . $value . '-set'] = array(
		'#type' => 'fieldset',
		'#title' => t('Colors'),
		'#collapsible' => FALSE, // Added
		'#collapsed' => FALSE,  // Added
		'#states' => array(
			'visible' => array(
				':input[name="shortcode"]' => array('value' => "$value"),
			),
		),
	);

	for($i = 1; $i < 9; $i++) {
		$form ['' . $value . '-set']['' . $value . '-col' . $i] = array (
			'#name' => t('col'.$i),
			'#type' => 'textfield',
			'#title' => t('Color #' . $i),
			'#default_value' => variable_get('ma_gcs_color' . $i, ''),
			'#size' => 8,
			'#states' => array(
				'visible' => array(
					':input[name="shortcode"]' => array('value' => "$value"),
				),
			),
		);
	}
	if ($key == "Bar" || $key == "Column") {
		$stacked = array(
			'True' => t('True'),
			'False' => t('False')
		);
		$form['' . $value . '-isstacked'] = array(
			'#name' => t('isstacked'),
			'#title' => t('Is this a Stacked Chart'),
			'#type' => 'select',
			'#description' => t('this only applies to bar and column charts'),
			'#options' => $stacked,
			'#states' => array(
				'visible' => array(
					':input[name="shortcode"]' => array('value' => "$value"),
				),
			),
		);
	}
	return $form;
}

function ma_gcs_shortcode_piechart_attributes($form, &$form_state) {
	$pieform = _ma_gcs_formbuild('Pie');
	return $pieform; 
}

function ma_gcs_shortcode_columnchart_attributes($form, &$form_state) {
	$columnform = _ma_gcs_formbuild('Column');
	return $columnform;
}

function ma_gcs_shortcode_barchart_attributes($form, &$form_state) {
	$barform = _ma_gcs_formbuild('Bar');
	return $barform;
}

function ma_gcs_shortcode_tablechart_attributes($form, &$form_state) {
	$tableform = _ma_gcs_formbuild('Table');
	return $tableform;
}

/**
 * Define our variables (parameters) for each shortcode
 */
function _ma_gcs_base_variables() {
  return array(
  	'type' => '',	
    'link' => '',
    'title' => '',
    'subtitle' => '',
    'col1' => '',
    'col2' => '',
    'col3' => '',
    'col4' => '',
    'col5' => '',
    'col6' => '',
    'col7' => '',
    'col8' => '',
  	'isstacked' => '',
  	'legal1' => '',
  	'legal2' => ''
  );
}    

function ma_gcs_theme() {
	$array = array(
		'shortcode_piechart' => array (
			'variables' => _ma_gcs_base_variables() 
		),
		'shortcode_barchart' => array (
			'variables' => _ma_gcs_base_variables() 
		),
		'shortcode_columnchart' => array (
			'variables' => _ma_gcs_base_variables() 
		),
		'shortcode_tablechart' => array (
			'variables' => _ma_gcs_base_variables() 
		), 
	);
 	return $array;
}

function _ma_gcs_shortcode($attrs) {
	$attrs = shortcode_attrs( _ma_gcs_base_variables(),$attrs);
	$attributearray = array();
	foreach ($attrs as $key => $value) {
		$attributearray += array("$key" => "$value");
	}
	return $attributearray;
}

function ma_gcs_shortcode_piechart($attrs) {
	$attributearray = _ma_gcs_shortcode($attrs);
 	$attributearray['type'] = "piechart";
 	return theme ( 'shortcode_piechart', $attributearray );
}

function ma_gcs_shortcode_columnchart($attrs) {
	$attributearray = _ma_gcs_shortcode($attrs);
	$attributearray['type'] = "columnchart";
	return theme ( 'shortcode_columnchart', $attributearray );
}

function ma_gcs_shortcode_barchart($attrs) {
	$attributearray = _ma_gcs_shortcode($attrs);
	$attributearray['type'] = "barchart";
	return theme ( 'shortcode_barchart', $attributearray );
}

function ma_gcs_shortcode_tablechart($attrs) {
	$attributearray = _ma_gcs_shortcode($attrs);
	$attributearray['type'] = "tablechart";
	return theme ( 'shortcode_tablechart', $attributearray );
}

/**
 * This function uses the attributes passed in to return the HTML of this shortcode.
 */

function _ma_gcs_shortcode_theme($vars) {
	$thisisrandom = generateRandomString ();
	$returnstring = '<div class="shortcodes"';
	$returnstring .= ' id="' . $thisisrandom . '"';
	$returnstring .= ' data-id="' . $thisisrandom . '"';
	foreach ($vars as $key => $value) {
		$returnstring .= ' data-' . $key . '="' . $value . '"';
	}
	$returnstring .= ' style="width: 900px; height: 500px;"></div>';
	return $returnstring;
}

function theme_shortcode_piechart($vars) {
	$returnstring = _ma_gcs_shortcode_theme($vars);
	return $returnstring;
}

function theme_shortcode_barchart($vars) {
	$returnstring = _ma_gcs_shortcode_theme($vars);
	return $returnstring;
}

function theme_shortcode_columnchart($vars) {
	$returnstring = _ma_gcs_shortcode_theme($vars);
	return $returnstring;
}

function theme_shortcode_tablechart($vars) {
	$returnstring = _ma_gcs_shortcode_theme($vars);
	return $returnstring;
}
/**
 * This function outputs some tips to the user beneath the WYSIWYG editor so they know
 * what the shortcode does and how to use it.
 */
function _ma_gcs_shortcode_tip($format, $long) {
	$output = array();
	$output[] = '<p><strong>' . t('[chartType link="http://URLhere.com"][/chartType]') . '</strong> ';
	if ($long) {
		$output[] = t('Outputs a link that is displayed as a chart.') . '</p>';
	}
	else {
		$output[] = t('Outputs text that links to a URL.') . '</p>';
	}
	
	return implode(' ', $output);
}
function ma_gcs_shortcode_piechart_tip($format, $long) {
	$format = $format;
	$long = $long;
	return _ma_gcs_shortcode_tip($format, $long);
}
function ma_gcs_shortcode_tablechart_tip($format, $long) {
	$format = $format;
	$long = $long;
	return _ma_gcs_shortcode_tip($format, $long);
}
function ma_gcs_shortcode_barchart_tip($format, $long) {
	$format = $format;
	$long = $long;
	return _ma_gcs_shortcode_tip($format, $long);
}
function ma_gcs_shortcode_columnchart_tip($format, $long) {
	$format = $format;
	$long = $long;
	return _ma_gcs_shortcode_tip($format, $long);
}
/**
 * This function generates a ranomd string to assign as a div id for the google chart (in case they have more than one on a page).
 */
function generateRandomString($length = 5) {
  return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}

